#include <algorithm>
#include <iostream>
#include <iterator>
#include <string>
#include <string_view>
#include <vector>
#include <numeric>
#include <functional>
#include <random>
#include <tuple>
#include <memory>
#include <iomanip>

//print sequences.
auto print_seq = [](auto rem,auto first, auto last){
    for(std::cout<<rem; first != last; std::cout<<*first++ <<' ') {}
};

        struct DivisibleBY
{
    const int d;
    //todo to understand these sentence.
    explicit DivisibleBY(int n): d(n) {}
    bool operator()(int n) const {return n % d == 0;}
};
void std_allof_anyof_noneof(){
    /*
     * PREDICATE: describe a callable that returns a value testable as a bool.
     * https://en.cppreference.com/w/cpp/named_req/Predicate
     */
    std::vector<int> v(10,2);
    std::partial_sum(v.cbegin(),v.cend(),v.begin());
    std::cout<<"Amount the numbers: ";
    std::copy(v.cbegin(),v.cend(),std::ostream_iterator<int>(std::cout," "));
    std::cout<<'\n';
    if (std::all_of(v.cbegin(),v.cbegin(),[] (int i) {return i %2==0;}))
        {
        std::cout<<"All numbers are even.";
         }
    if (std::none_of(
            v.cbegin(),
            v.cend(),
            std::bind(std::modulus<>(),std::placeholders::_1,2)))
        {
            std::cout<<"None of them are odd\n";
        }
 }
void std_copy(){
    std::vector<int> from_vector(10);
    std::iota(from_vector.begin(),from_vector.end(),1);
    std::vector<int> to_vector;
    std::copy(from_vector.begin(),from_vector.end(),std::back_inserter(to_vector));
    //or alternatively,
//    std::vector<int> to_vector1(from_vector.size());
//    std::copy(from_vector.begin(),from_vector.end(),to_vector.begin());
    std::cout<<"to vector contains: ";
    std::copy(
            to_vector.begin(),
            to_vector.end(),
            std::ostream_iterator<int>(std::cout," "));
    std::cout<<'\n';
    std::cout<<"Odd numbers in to_vector are: ";
    std::copy_if(
            to_vector.begin(),
            to_vector.end(),
            std::ostream_iterator<int>(std::cout, " "),
            [](int x) {return x %2 !=0;} // lambda by-copy capture by default.
            );
    std::cout<<'\n';
    std::cout<<"to_vector contains these multiples of 3: \n";
    /*
     * Erases all the elements.
     * Note that this function only erases the elements,
     * and that if the elements themselves are pointers,
     * the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility.
     */
    to_vector.clear();
    std::copy_if(
            from_vector.begin(), from_vector.end(),
            std::back_inserter(to_vector),
            [] (int x) {return x % 3 == 0;}
            );
    for (int x:to_vector) std::cout<<x<<' ';
    std::cout<<'\n';
    to_vector.clear();
    to_vector.resize(15); //Resizes the %vector to the specified number of elements
    std::copy_backward(from_vector.begin(), from_vector.end(), to_vector.end());
    std::cout<<"to_vector contains: ";
    for (auto i: to_vector) std::cout<<i<<' ';
    std::vector<int>out;
    std::cout<<"copy_n module.\n";
    std::copy_n(to_vector.begin()+4, 6,std::back_inserter(out));
    auto print = [] (const int& i) {std::cout<<i<<' ';};
    std::for_each(out.begin(), out.end(), print);




}

void std_findif_find_ifnot(){
    std::vector<int> v{1,3,3,10};
    int  n1 = 3, n2=5;
    auto is_even = [] (int i) {return i%2 == 0;}; //predicate form that can capture something.
    auto result1 = std::find(begin(v),end(v),n1);
    auto result2 = std::find(begin(v),end(v),n2);
    auto result3 = std::find_if(begin(v), end(v),is_even);
    (result1 != std::end(v))
        ? std::cout<<"V contains " <<n1<<'\n'
        : std::cout<<"V does not contain "<<n1<<'\n';

    (result2 != std::end(v))
        ? std::cout<<"V contains "<<n2<<'\n'
        : std::cout<<"V does not contains "<<n2<<'\n';

    (result3 != std::end(v))
        ? std::cout<< "V contains even number: "<<*result3<<'\n'
        : std::cout<< "V does not contain even numbers\n";
    if(result3 !=  std::end(v))
        std::cout<<"result3 deference "<<*result3<<" endl.";
}

void std_generate_n()
{
    std::mt19937 rng;
    std::generate_n(
            std::ostream_iterator<std::mt19937::result_type>(std::cout, " "),
                    5,
                    std::ref(rng)
            );
   std::cout<<'\n';
}
void std_mt19937_demo()
{
    // pseudo-random number generator.
    std::mt19937 mt;
    mt.seed(1289); //reinitializes the seed value of object.
    std::cout<<"random numbers generated by mt19937 are: \n";
    for (int i=5; i>0;i--) std::cout<<mt()<<' ';
}

using container = std::vector<std::string>;
void print(std::string_view comment, const container& src, const container& dst = {})
{
    auto prn = [](std::string_view name, const container& cont) {
        std::cout << name;
        for (const auto &s: cont) { std::cout << (s.empty() ? "." : s.data()) << ' '; }
        std::cout << '\n';
    };
    std::cout << comment << '\n';
    prn("src: ", src);
    if (dst.empty()) return;
    prn("dst: ", dst);
}

void std_partition()
{
    /* Reorders the elements in the range [First, last) in such a way that all elements
     * for which the predicate p return true precedes the elements for which
     * predicate p return false.
     * Relative order of the elements is not preserved.
     */
    std::array<int,10> v = {1,2,3,4,5,6,7,8,9,10};
    auto is_even = [] (int i){return i % 2;};
    std::cout.setf(std::ios_base::boolalpha);
    std::cout<<std::is_partitioned(v.begin(),v.end(),is_even)<<' ';

    //std::partition return Iterator to the first element of the second group.
    std::partition(v.begin(),v.end(),is_even);

    print_seq("After partitioning, v: ", v.cbegin(),v.cend());
    std::cout<<'\n';

    const auto pp = std::partition_point(v.cbegin(), v.cend(), is_even);
    const auto i = std::distance(v.cbegin(),pp);
    std::cout<<"Partition point is at "<<i<<"; v["<< *pp <<"]"<<'\n';
    print_seq("First partition (all even elements): ", v.cbegin(),pp);
    print_seq("; Second partition (all odd elements): ",pp, v.cend());
    std::cout<<'\n';
    std::cout<<std::is_partitioned(v.begin(),v.end(),is_even)<<'\n';
    std::reverse(v.begin(), v.end());

    std::cout<<std::is_partitioned(v.cbegin(), v.cend(), is_even)<<' ';

    std::cout<<std::is_partitioned(v.crbegin(), v.crend(),is_even)<<' ';
    std::cout<<"........std::partition_point....\n";
    for (auto i:v) std::cout<<i;
    int true_arr[5] = {0};
    int false_arr[5] = {0};
    /*
     * Copies the elements from range [first, last) to two different ranges depending
     * on the value returned by the predicate p. the element that satisfy the predicate p
     * are copied to the range beginning at d_first_true.
     */
    std::partition_copy(std::begin(v),std::end(v),
                        std::begin(true_arr),
                        std::begin(false_arr),
                        [] (int i) {return i>5;}
                        );
    std::cout<<"Partition Copy Demo, true_arr: \t";
    for (auto x:true_arr) {std::cout<<x<<' ';}

}

void std_sort()
{
    /*is_sorted: Checks if the element in range [First, last) are sorted in non-descending order.
     *
     */
    int digits[] {3,1,4,1,8};
    std::cout<<": is_sorted: "<<std::boolalpha
            <<std::is_sorted(std::begin(digits),std::end(digits))
            <<'\n';
    std::sort(std::begin(digits),std::end(digits));
    for (auto i:digits) {std::cout<<i<<' ';}
    std::cout<<"After sort function: "<<std::is_sorted(std::begin(digits),std::end(digits))<<'\n';
}

//template to print out container elements wrapped it with "{" and "}".
template<typename Os, typename V>
Os& operator<< (Os& os, V const& v) {
    os<<"{ ";
    for ( auto const& e: v ) os << e <<' ';
    return os<< "}";
}

void std_permutation()
{
    static constexpr auto v1 = {1,2,3,4,5};
    static constexpr auto v2 = {3,5,4,1,2};
    static constexpr auto v3 = {2,3,1,5,4};
    std::cout<< v2<<" is a permutation of "<<v1<<": "<<std::boolalpha
             <<std::is_permutation(v1.begin(),v1.end(),v2.begin())<<'\n'
             << v3<<"is a permutation of " <<v1<<": "<<std::boolalpha
             <<std::is_permutation(v1.begin(),v1.end(),v3.begin());
}
void unitializedCopyN()
{
    /* Copies count elements from a range beginning at first to an uninitialized memory area beginning at d_first.
     *
     */
    std::vector<std::string> v = {"This", "is","an","Example"};
    std::string *p;
    //std::size_t is the unsigned integer type of the result of size_of operator.
    std::size_t sz;
    /*
     * Reinventing the wheel, but this time with prettier spokes!
     * This function tries to obtain storage for __len adjacent Tp objects.
     * The objects themselves are not constructed, of course. A pair
     * is returned containing the buffer s address and capacity (in the units of sizeof(_Tp)),
     * or a pair of 0 values if no storage can be obtained.
     * Note that the capacity obtained may be less than that requested if the memory is unavailable;
     * you should compare len with the .second return value. Provides the nothrow exception guarantee
     */
    std::tie(p,sz) = std::get_temporary_buffer<std::string>(v.size());

    sz = std::min(sz,v.size()); // both same: 4.

    std::uninitialized_copy_n(v.begin(),sz,p);

    for (std::string* i = p; i != p+sz; ++i) {
        std::cout<<*i<<' ';
        i->~basic_string<char>();
    }
    // Deallocates storage previously allocated with std::get_temporary_buffer.
    std::return_temporary_buffer(p);

}
struct SUM{
    void operator() (int n) {sum +=n;}
    int sum{0};
};
void forEachALL()
{
    std::vector<int> numbers {3,19,42,13,49};
    auto print = [] (const int& n) {std::cout<<" "<<n;};
    std::cout<<"Before: ";
    /* for_each(_InputIterator __first, _InputIterator __last, _Function __f)
     * Applies the function object __f to each element in the range [first,last).
     * __f must not modify the order of the sequence. If __f has a return value it is ignored
     */
    std::for_each(numbers.cbegin(), numbers.cend(), print);
    std::cout<<'\n';

    std::for_each(numbers.begin(), numbers.end(),[](int& n) {n++;});
    //call SUM::operator() for each number;
    SUM s = std::for_each(numbers.begin(), numbers.end(), SUM());
    std::cout<<"after: ";
    std::for_each(numbers.cbegin(), numbers.cend(),print);
    std::cout<<'\n';
    std::cout<<"sum: "<<s.sum<<'\n';

    /* Applies the given function object f to the result of dereferencing every iterator
     * in the range[first,last), in order.
     */
    std::for_each_n(numbers.begin(), 2,[](auto& n){n++;});
    std::cout<<"After for_each_n operation: ";
    for (auto i: numbers)  std::cout<<i<<' ';
    std::cout<<'\n';
}
void std_count_ifAndCount()
{
    constexpr std::array v = {1,2,3,4,5,6,7,8,9,10};
    std::cout<<v;
    std::cout<<'\n';
    for (const int target: {3,4,5}) {
        const int num_items = std::count(v.cbegin(), v.cend(),target);
        std::cout<<"number: "<<target<<", count: "<<num_items<<'\n';
    }

    //lambda expression to count elements divisible by 4.
    int count_divBy4 =
            std::count_if(v.begin(), v.end(), [] (int i ) {return i % 4 ==0;});
    std::cout<<"Numbers divisible by four: "<<count_divBy4<<'\n';

    auto distance = [] (auto first, auto last) {
        return std::count_if(first, last,[](auto) {return true;});
    };

    static_assert(distance(v.begin(), v.end())==10);

}
void std_remove()
{
    /* Remove all elements satisfying specific criteria from range[First, last)
     * and return a past-the-end iterator for the new end range.
     */
    std::string str1 = "Text with some    spaces";
    // the white spaces are removed from the string logically.
    auto noSpaceEnd = std::remove(str1.begin(), str1.end(),' ');
    std::cout<<std::string_view(str1.begin(), noSpaceEnd)<<" size: "<<str1.size()<<'\n';
    str1.erase(noSpaceEnd,str1.end());
    //The spaces are removed from the string physically.
    std::cout<<str1<<" size: "<<str1.size()<<'\n';
    std::cout<<"test std_if\n";
    std::string str2 = "Text\n with\tsome \t   whitespaces\n\n";
    str2.erase(
            std::remove_if(
                    str2.begin(), str2.end(),
                    [] (unsigned char x) {return std::isspace(x);}),
                    str2.end()
            );
    std::cout<<str2<<'\n';
    /* std::remove_copy: copies elements from range [first,last), to another range beginning at d_first,
     * omitting the elements which satisfy specific criteria.Source and destination not overlap.
     */
    //    std::string remove_str("psql");
    std::string str3 = "#Return #Value #Optimization";
    std::cout<<"before: "<<std::quoted(str3)<<'\n';
    std::cout<<"After: \"";

    std::remove_copy(str3.begin(),
                     str3.end(),
                     std::ostream_iterator<char>(std::cout),
                     'R'
                   );
    std::cout<<"\"\n";


}
void std_replace()
{
    /* Replaces all elements satisfying specific criteria with new_value in the range [first,last),
     *  std::replace_if Replaces all elements for which predicate p returns true.
     */
    std::cout<<"std:;replace code block begins.\n";
    std::vector<int> s {5,6,7,3,1,8,9,10,2,4};
    std::replace(s.begin(), s.end(),8, 88);
    for (int a: s) {
        std::cout<< a<<" ";
    }
    std::cout<<'\n';
    std::replace_if(s.begin(), s.end(),
                    std::bind(std::less<>(), std::placeholders::_1,5),55);
    std::cout<<"now the vector s: "<<s<<'\n';
//    for (int a : s) {
//        std::cout<< a<<" ";
//    }
//    std::cout<<"std_replace code block ends.\n";
    //std::replace_copy
    std::replace_copy_if(s.begin(), s.end(),
                         std::ostream_iterator<int>(std::cout, " "),
                                 [] (int n) {return n>60;}
                                 ,99);
    std::cout<<'\n';
}
void std_unique_copy()
{
    /* Copies the elements from range [first, last), to another range beginning
     * at d_first in such a way that there are no consecutive equal elements.
     */
    std::string s1 = "The     string  with   many    spaces!";
    std::cout<<"Before: "<<s1<<'\n';
    std::string s2;
    /*
     * Elements are compared using the given binary predicate p.
     */
    std::unique_copy(s1.begin(), s1.end(), std::back_inserter(s2),
                     [] (char c1, char c2) {return c1 == ' ' && c2 == ' ';});
    std::cout<<"After: "<<s2<<'\n';
}
void std_rotate_copy()
{
    std::vector<int> src = {1,2,3,4,5};
    auto pivot = std::find(src.begin(), src.end(),3);
    std::vector<int> dest(src.size());
/*
 *
    template< class ForwardIt, class OutputIt >
    constexpr OutputIt rotate_copy( ForwardIt first, ForwardIt n_first,
                                ForwardIt last, OutputIt d_first );
 * Copies the elements from range [first, last), to
 *  another range beginning at d_first in such a way,
 *  that the element n_first becomes the first element of the new range
 *  and n_first - 1 becomes the last element.
 */
    std::rotate_copy(
            src.begin(),pivot,src.end(),dest.begin()
            );
    for (const auto &i :dest)
    {
        std::cout<<i<<' ';
    }
    std::cout<<'\n';
}

void std_heap()
{
    /* std::is_heap_until Examine the range [first, last) and find the largest range beginning at first which is max heap.
     * std::is_heap Checks if the elements in range [first, last) are a max heap.
     * std::push_heap Inserts the element at the position last-1 into the max heap defined by the range[first, last-1).
     * std::pop_heap Swap the value in the position first and the position last-1 and makes the subrange [first, last-1)
     *  into a max heap.
     *  std::sort_heap Converts the max heap [first, last) into a sorted range in ascending order.
     */
    std::vector<int> v {3,1,4,1, 6,9};
    std::cout<<"Initially, v: "<< v;
    std::cout<<'\n';
    if(!std::is_heap(v.begin(), v.end())) {
        std::cout<<"Making heap....\n";
        std::make_heap(v.begin(), v.end());
    }
    std::cout<<"After make_heap, v: ";
    std::cout<<v;
    v.push_back(2);
    v.push_back(11);
    std::cout<<"Print out v again: " << v<<'\n';
    auto heap_end = std::is_heap_until(v.begin(), v.end());
    std::cout<<"Only heap: ";
    for (auto i= v.begin(); i != heap_end; ++i) std::cout<< *i<<' ';
    std::cout<<'\n';
    std::push_heap(v.begin(), v.end());
    std::cout<<"After push heap: ";
    std::cout<<v;
    std::cout<<'\n';
    std::pop_heap(v.begin(),v.end()); //move the largest to the end.
    std::cout<<"After pop-heap, now the position is "<<v<<'\n';
    int largest = v.back();
    v.pop_back();
    std::cout<<"Heap V without the largest: "<<v<<'\n';
    std::sort_heap(v.begin(), v.end());
    std::cout<<"\n sorted: \t"<<v;
}
void std_set_operation()
{
    /*
     *
     */
    std::vector<char> v1{'a','b','c','f','h','x'};
    std::vector<char> v2{'a','b','c'};
    std::vector<char> v3 {'a','c'};
    std::vector<char> v4 {'g'};
    std::vector<char> v5 {'a','c','g'};
    for (auto i:v1) std::cout<<i<<' ';
    std::cout<<"\nIncludes: \n"<<std::boolalpha;

    for(auto i:v2) std::cout<<i<<' ';
    std::cout<<": "<<std::includes(v1.begin(), v1.end(),
                                   v2.begin(), v2.end())<<'\n';
    for (auto i:v3) std::cout<<i<<' ';
    std::cout<<": "<<std::includes(v1.begin(), v1.end(),
                                   v3.begin(), v3.end())<<'\n';
    for (auto i: v4) std::cout<<i<<' ';
    std::cout<<": "<<std::includes(v1.begin(), v1.end(),
                                   v4.begin(), v4.end())<<'\n';
    for (auto i: v5) std::cout<<i<<' ';
    std::cout<<": "<<std::includes(
            v1.begin(), v1.end(),
            v5.begin(), v5.end()
            )<<'\n';

    auto cmp_nocase = [] (char a, char b) {
        return std::tolower(a) <std::tolower(b);
    };
    std::vector<char> v6 {'A','B','C'};

    for (auto i: v6) std::cout<<i <<' ';
    /* comp. The signature of the compatison function should be equivalent to the following
     * bool comp (const Type1 &a, const Type2 &b).
    */
    std::cout<<": (case-sensitive) "
            <<std::includes(v1.begin(),v1.end(),
                            v6.begin(),v6.end(),cmp_nocase)<<'\n';

    /* std::set_difference. Copies the elements from the sorted range[first1,last1)
     * which is not found in sorted range[first2,last2) to the range beginning at d_first.
     *
     */
    std::vector<int> int_v1 {1,2,5,6,5,9};
    std::vector<int> int_v2 {2,5,7};
    std::vector<int> diff;
    std::set_difference(
            int_v1.begin(), int_v1.end(),
            int_v2.begin(), int_v2.end(),
            std::inserter(diff,diff.begin())
            );
    for (auto i: int_v1) std::cout<<i<<' ';
    std::cout<<"minus ";
    for (auto i: int_v2) std::cout<<i<<' ';
    std::cout<<"is: ";
    for (auto i: diff) std::cout<<i<<' ';
    std::cout<<'\n';
    std::vector<int> v_intersection;
    /*
     *
     */
    std::set_intersection(int_v1.begin(), int_v1.end(),
                          int_v2.begin(), int_v2.end(),
                          std::back_inserter(v_intersection));
    for(auto i:v_intersection) std::cout<<i<<' ';
    /*
     * Computes symmetric difference of two sorted range: the elements that are found
     * in either of the ranges, but not in both of them are copied to the range beginning at d_first.
     * The result range is also sorted.
     */
    std::vector<int> v_symDifference;
    std::sort(int_v1.begin(), int_v1.end());
    std::sort(int_v2.begin(), int_v2.end());

    std::set_symmetric_difference(
            int_v1.begin(), int_v1.end(),
            int_v2.begin(), int_v2.end(),
            std::back_inserter(v_symDifference)
            );
    std::cout<<"The symmetric difference is: ";
    for (auto n:v_symDifference) std::cout<<n<<' ';
    /*
     * Constructs a sorted union beginning at d_first consisting of the set
     * of elements present in one or both sorted range[first1,last1) and [first2,last2).
     */
    std::vector<int> unionDest1;
    std::set_union(int_v1.begin(),int_v1.end(),
                   int_v2.begin(), int_v2.end(),
                   std::back_inserter(unionDest1));
    std::cout<<"After union, the union elements: ";
    for (auto i: unionDest1) std::cout<<i <<' ';
    std::cout<<'\n';
}
int main() {
        std::cout<<"line begin;\n";
        std_set_operation();
//        std_heap();
//        std_rotate_copy();
//    std_replace();

//    std_remove();
//    std_unique_copy(); //https://en.cppreference.com/w/cpp/algorithm/unique_copy
//    std_count_ifAndCount();

//    forEachALL();
//    std_permutation();
//    unitializedCopyN(); https://en.cppreference.com/w/cpp/memory/uninitialized_copy_n

//    std_sort(); //sort
//    std_partition();
    {
//        container src{"foo", "bar", "baz"};
//        container dst{"qux", "quxx", "quuz", "corge"};
//        print("Non-overlapping case: before move_backward: ", src, dst);
//        /* Moves the elements from the range [first, last), to another range ending at d_last.
//         * The last element move first, but their relative order is preserved.
//         */
//        std::move_backward(src.begin(), src.end(), dst.end());
//        print("After: ", src, dst);
//        src = {"snap", "crackle", "pop", "lock", "drop"};
//
//        std::move_backward(src.begin(), src.begin() + 3, src.end());
//        std::cout << src.size(); //move only make content null, does not reduce size.
    }

    //    std::vector<int> v{1,5,8};
//    std_allof_anyof_noneof();
//    std_copy(); //https://en.cppreference.com/w/cpp/algorithm/copy

// any_of demo.
//    if(std::any_of(v.cbegin(),v.cend(), DivisibleBY(7)))
//        std::cout<<"At least one number is divisible by 7.\n";
//    else std::cout<<"No number is divisible by 7.\n";

/* std::find, std::find_if, std::find_if_not.
 * https://en.cppreference.com/w/cpp/algorithm/find
 * */
    //todo find if, two case, return one element or return more than one element.
//    std_findif_find_ifnot();

//        std_mt19937_demo(); // https://www.geeksforgeeks.org/stdmt19937-class-in-cpp/

    std::cout<<"\t---line ends;\n";return 0;


}
